* Library Information
 /org-table-jb-extras.el/ --- Extra commands & functions for working with org-tables

 - Description :: Extra commands & functions for working with org-tables
 - Compatibility :: GNU Emacs 25.2.2
 - Package-Requires :: ((org "9.4.6") (cl-lib "1") (ido-choose-function "0.1") (dash "2.19.1") (s "1.13.1"))

* Possible Dependencies

org-mode cl-lib ido-choose-function ampl-mode dash s 

* Commentary

Bitcoin donations gratefully accepted: 16xSxS5v7rpknr4WL8unwCRab5nZEfc7eK

This library contains many extra functions & commands for dealing with org-tables which are documented below.
Most of the functions useful to users can be accessed through a single command: *org-table-dispatch*.

When *org-table-dispatch* is called while point is in an org-table an ido menu of possible
actions from *org-table-dispatch-actions* is offered to the user. These actions include:
"copy table", "copy rectangle", "kill/clear cells", "export to file", "copy cols to calc",
"plot graph", "fit curve to cols", "transpose table", "split/join columns", "join rows/flatten columns",
"toggle display of row/column refs", "Hide/show column", "Narrow column", "Narrow table", "Fill empty cells",
"Insert vertical line", etc.
** Reshaping org-tables
Sometimes I try to export an org file to latex/pdf, and I find that the table no longer fits the page with the desired font size.
In order to make the table narrower without losing content new rows need to be created to hold spillover text from cells above.
You can create the rows and split the cells using *org-table-wrap-region* however this is tedious and error prone.

The problem of choosing which cells should be split, and where new rows should be added can be formulated as a non-linear optimization problem, and written as an [[https://en.wikipedia.org/wiki/AMPL][AMPL]] program: [[https://github.com/vapniks/org-table-jb-extras/blob/main/table_widths.mod][table_widths.mod]]
The command *org-table-narrow* uses this program to narrow the org-table at point to the desired width. To run it you need a copy of AMPL (A Mathematical Programming Language) and a solver, which can be downloaded for free from [[https://ampl.com/ce][here]].

Alternatively if you don't want to depend on external binaries you can use the *org-table-narrow-column* command to narrow a single column of the table by introducing new rows.

If you want more fine-grained control you can use *org-table-flatten-columns* to select exactly which cells should be combined, and show they should be combined (by appending, prepending, summing values, etc). When used in combination with *org-table-jump-next* (see below) and keyboard macros this can be a very powerful tool.
** Filtering org-tables
*org-dblock-write:tablefilter* is a dynamic block function which can be used for filtering the rows of a table into another one according to various criteria.

For more info about dynamic blocks see here: https://orgmode.org/manual/Dynamic-Blocks.html 
** Navigating/altering org-table cells
The *org-table-jump-next* & *org-table-jump-prev* commands provide a method for quickly & easily navigating and altering tables cell-by-cell. You select a jump conditions which determine the sequence of cells visited when *org-table-jump-next* is invoked repeatedly.
There are many predefined jump conditions in *org-table-jump-condition-presets* such as "empty" (jump to the next empty cell), "---/cell" (jump to the next cell under a horizontal line), "first<->last" (toggle between first/last cell), etc.

These presets can be selected, altered, or you can define you own using an arbitrary lisp expression, by either using a C-u prefix arg with *org-table-jump-next/org-table-jump-prev* or calling *org-table-set-jump-condition*.
You can also select the order in which cells are checked by using a double C-u prefix when calling *org-table-jump-next/org-table-jump-prev*, or by calling *org-table-set-jump-direction*.

When defining your own jump condition you can make use of functions defined in *org-table-filter-function-bindings* to help define the condition, e.g. *hline-p* (check for horizontal lines), *matchfield* (match a field against a regexp), *countcells* (count neighbouring cells matching regexps), and also function to alter the table, e.g. *setfield* (change a field), *replace-in-field* (replace substring of field) *convertdate* (change the format of a date string in field), *flatten* (combine cells), etc.

Many of these functions can be applied either to the cell currently being checked, or its neighbouring cells.
The functions may pass information from one jump to the next using *org-table-jump-state* which allows you to perform more complex tasks. The file [[https://github.com/vapniks/org-table-jb-extras/blob/main/org-table-solve-mazelog.org][org-table-solve-mazelog.org]] contains examples of this.
* Commands & keybindings

 Below is a complete list of commands:

  - *org-table-insert-or-delete-vline*
      Insert a vertical line in the current column, or delete some if NDELETE is non-nil.
  - *org-table-grab-columns*
     Copy/kill columns or region of table and return as list(s).
  - *org-table-flatten-columns* :
     Apply FN to next NROWS cells in selected columns and replace cells in current row with results.\\
  - *org-table-dispatch* :
     Do something with column(s) of org-table at point.\\
  - *insert-file-as-org-table* :
     Insert a file into the current buffer at point, and convert it to an org table.\\
  - *org-table-kill-field* :
     Kill the org-table field under point.\\
  - *org-table-copy-field* :
     Copy the org-table field under point to the kill ring.\\
  - *org-table-narrow-column*
     Split the current column of an org-mode table to be WIDTH characters wide.\\
  - *org-table-narrow*
     Narrow the entire org-mode table, apart from FIXEDCOLS, to be within WIDTH characters by adding new rows.\\
  - *org-table-fill-empty-cells*
     Fill empty cells in current column of org-table at point by splitting non-empty cells above them.\\
  - *org-table-query-dimension*
     Print and return the number of columns, data lines, cells, hlines, height & width (in chars) of org-table at point.\\
  - *org-table-move-cell*
     Prompt for a direction and move the current cell in that direction.\\
  - *org-table-show-jump-condition*
     Display a message in the minibuffer showing the current jump condition.\\
  - *org-table-set-jump-condition*
     Set the CONDITION for *org-table-jump-condition*.\\
  - *org-table-set-jump-direction*
     Set the DIRECTION for *org-table-jump-condition*; 'up, 'down, 'left or 'right.\\
  - *org-table-jump-next*
     Jump to the STEPS next field in the org-table at point matching *org-table-jump-condition*.\\
  - *org-table-jump-prev*
     Like *org-table-jump-next* but jump STEPS in opposite direction.\\
     
* Customizable Options

 Below is a list of customizable options:

   - *org-table-flatten-functions* :
    Alist of (NAME . FUNCTION) pairs for use with  - *org-table-flatten-column* :.\\
   - *org-table-graph-types* :
    List of graph types for  - *org-plot/gnuplot* :.\\
   - *org-table-dispatch-actions* :
    Actions that can be applied when  - *org-table-dispatch* : is called.\\
   - *org-table-filter-function-bindings* :
    Function bindings (with descriptions) used by *org-table-jump-condition* & *org-dblock-write:tablefilter*.\\
   - *org-table-jump-condition-presets*
    Named presets for *org-table-jump-condition*.\\
   - *org-table-timestamp-patterns*
    List of java style date-time matching patterns as accepted by *datetime-matching-regexp* and related functions.\\
   - *org-table-timestamp-format*
    Default format for timestamps output by *org-table-convert-timestamp*.\\
